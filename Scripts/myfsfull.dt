enable=scriptverify
version

# Define the output path file system:

$MNT=/mnt
$DIR=${MNT}/dtdir
$FILE=${DIR}/dt.data
#$OPTS="onerr=abort log=/var/tmp/thread.log"
$OPTS="enable=debug,fdebug onerr=abort log=/var/tmp/thread.log"
$REPORT_FREE_SPACE="system df -kP ${MNT} ; sleep 5 ; df -kP ${MNT}"

logprefix="%et %prog (j:%job t:%thread): "
of=dt.data count=1 enable=debug disable=stats
exit

system df -kP ${MNT}
system time rm -rf ${DIR}
system df -kP ${MNT} ; sleep 5 ; df -kP ${MNT}
system rm /var/tmp/thread.log*

logprefix="%et (%prog j:%job t:%thread): "

# Execute a series of tests to ensure file system full is properly handled.

# First, create a master log for ALL output.
mlog=/var/tmp/master.log

# Start with a single file, more than the volume space.
#of=${FILE} ${OPTS} bs=random limit=1g

# Same test, ensuring buffer modes get modified accordingly.
#of=${FILE} ${OPTS} bs=random limit=1g bufmodes=buffered,unbuffered

# Now, let's ensure async I/O file system full is handled properly.
#of=${FILE} ${OPTS} bs=random limit=1g aios=8

# Now verify multple passes with varying direction and type work.
#of=${FILE} ${OPTS} bs=random limit=1g passes=3 iodir=vary iotype=vary

# Same as the above, except now we're kicking off 10 threads.
#of=${FILE} ${OPTS} bs=random limit=1g passes=3 threads=10 iodir=vary iotype=vary

# Let's verify direct I/O work properly.
#of=${FILE} ${OPTS} bs=random limit=1g passes=3 threads=10 flags=direct

# Same test with file truncation and multiple passes.
#of=${FILE} ${OPTS} bs=random limit=1g passes=3 threads=10 oflags=trunc

# Same test with deleting all files between passes.
#of=${FILE} ${OPTS} bs=random limit=1g passes=3 threads=10 enable=deleteperpass

# Now create sufficient files to overfill the volume.
#of=${FILE} ${OPTS} bs=random limit=1m count=1 files=inf

# Verify our directory full and multiple files work properly.
of=${FILE} ${OPTS} bs=random limit=10m files=10 sdirs=10 depth=10

# Same as above except with truncate and deleting enabled.
of=${FILE} ${OPTS} bs=random limit=10m files=10 sdirs=10 threads=10 oflags=trunc enable=deleteperpass

# Same as above except more small files so we create more subdirectories.
of=${FILE} ${OPTS} bs=random limit=1m files=10 sdirs=10 depth=10 oflags=trunc enable=deleteperpass

# Create lots of files and lots of subdirectories (up to 100 per top level directory).
of=${FILE} ${OPTS} bs=random limit=1m count=1 files=10 sdirs=10 depth=100 oflags=trunc enable=deleteperpass

# This test is expected to fail, since we cannot free space.
# Multiple slices (threads) to the same file, we cannot delete or truncate!
#of=${FILE} ${OPTS} bs=random limit=1g slices=10

system df -kP ${DIR}
